				     React
....................................................................................

Software setup:

1.vs code
2.node
3.chrome
.............................................................................................

What is React?

 React is javascript lib for building user interface applications for web.

What is User interface application?
 
  The user where he interacts , those applications are called user interface applications.

Eg:
  Desktop applications
     if you want to interact with os, shell is primary user interface
     shell in windows, command,powershell,explorer 

  Web Browser:
     It is one of the application software, acts as user interface for web applications

 
 Hand Held devices
  =>Mobile applications
  =>Watch
  =>Tabs
 etc..

What is lib,framework?

Both frameworks and libraries are code written by someone else that is used to help solve "common problems".

lib: 
  Which is used to solve only one type of problem in large problems.
eg:
 jquery,react,......

Framework:
   Which is used to solve many problems under one place
Angular,Vue,Polymer.......
............................................................................................
					Web
............................................................................................

What is Web?

Web is the distributed software system which distributes information over internet(Type of network).

Distributed software means , sharing information to many machines over networks.

Types of Distributed System:

1.Mainframe based distributed system - 1960.
    Mainframe is server, clients are dump terminals
2.Micro Computer based distributed system - client -server-  1970s
  Server would be either mainframework or micro computer.
  Clients are micro computer.
  
3.Micro Computer based distibuted system -1970 to 1989
   3.1.single tier(layer)
      Server code and client code would be in the same machine.
   3.2. two tier(layer)
      Server code  is kept in the separate machine and client code is kept in the separate       machine, both machines communicate via networks(LAN,WAN,MAN).
   3.3. three tier(layer)
      Server code  is kept in the separate machine,Database also kept machine and client code    is kept in the separate       machine, both machines communicate via networks(LAN,WAN,MAN).
4. N- tier architecture -1989...
     Web based,internet based architecture.

What is web and history of web?

Web is distibuted system , built on internet

Where the web was born

Tim Berners-Lee, a British scientist, invented the World Wide Web (WWW) in 1989, while working at CERN. 
The web was originally conceived and developed to meet the demand for automated information-sharing between scientists in universities and institutes around the world.

The first web site
http://info.cern.ch/hypertext/WWW/TheProject.html
The web server
The first web server was "Next Computer".

The first web client(browser) was line mode web browser.
............................................................................................

The technologies were created as part of web

=>HTML 
    HTML is programming language which is used to create web documents. which can be sent over internet
=>Web Server
    It is program which is used to distribute the web documents over internet
=>Web Agent(Browser
   It is program which is used to view the distributed web documents from the server

=>HTTP 
    It is transport protocal which carries web documents over internet.
..............................................................................................
				  Types of Web Application
..............................................................................................

1.Static web application - 1989 - 1995
   Preparing html documents by hand about organization,something

2.Dynamic content generation web application -1995 to till date
  =>HTML pages are prepared by the program not by hand.
  =>HTML Pages may contain information about company,customers,products but these information     are present inside database.
  =>we introduce the program which connects database , prepares html pages , and sends back to     the web server.
DCG Web application technologies:
   ->CGI - Common gate way interface -  perl,c language used to connect db,prepare html pages.
   ->J2EE - Servlets, JSP
   ->ASP - Micro soft -  Active Server Pages
   ->PHP - Open Source Project

3. Web Service - 1999 to till date
  
   In DCG technology, users can send request , get response in the form of html pages, where    browsers renders those html pages 
  
   B To B Integration : Biz to Biz integration

   One biz organization can send information to other biz organization via internet with web

   Web service is program which can send data to other webservice program , process them    accordingly
   
 if you are sending data from one system to another system , each system is running on various different languages

 eg:
  java objects cant be sent to PHP.

 how to make data both parties must understand.

 Data interchange format techonlogy was introduced- common format for both systems.
 In 2000, In the US , The data interchange conference was held.
 In the conference many data formats were proposed
 
 1.XML
 2.JSON
 3.text
 4.ascii
 etc 25 formats

At end of the conference , XML Was selected as primary data interchange format.

HTTP protocal was desinged to send only html documents over internet. if you want to send xml,
then how to send it.
 The new application protocal was designed , SOAP(Simple Object Access Protocal)

Types of Web Service:

=>XML based webservice / SOAP based WebService
   -Programs exchange xml as primary data format

Fall of SOAP Web Services:

->SOAP web services are very complex to build and maintain due to various standards 
->Performance is very less , because over network not only data is sent but its meta data is also transported.
->Soap which restricts only one data format - XML
etc......

=>RESTFull Web Service

 Restfull webservice is webservice model introduced alternate to SOAP Based web based services based on "Rest Architecture" , purly depends http protocal only.

->We can send any of type of data not only xml
->Primary format is "JSON".
->Multi format support
->Native HTTP protocal support
->very light weight

.............................................................................................
				Client Side Web Technology
.............................................................................................

Browser based Client side web technology:
.........................................

Static web page rendering: 1989 to 1995

The web browsers sends the request,once html pages are ready, it renders.

Dynamic Content rendering : 1996 to till.
..............................................................................................
				HTML  internal work flow
.............................................................................................
HTML:

1.HTML IS PL? - YES
2.HTML Is compiled -YES
3.HTML is excuted-YES

java
 -source .java
 -compile -.class -assembly
 -excute -jvm--result

index.html -source code

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

-------------------Browser
loader---LOAD Code into browser
 |
   from file: or http:
 |
Parser : Parser is special compiler which converts source into lexcial tree(string tree)
 |
body
  div
     h1
        Welcome 
     h1
  div
body
|
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body
|
-------------------------Execution cycle------------------------------------
HTML Execution engine : Request Os ,to allocate memory :Runtime

-LinkedList

body -Node
  div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body

 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
body
...
|
|
|
Layout/Paint Engine: will convert nodes into pxs : final output
..............................................................................................
				Dynamic HTML - Inside Web Browser
.............................................................................................

Once the html has been rendered by the web browser, can we change the html(adding new element,updating existing element content,removing node,listing nodes).

The company called Netscap communcation, the second web browser creator after line mode web browser.

The NetsCap communication introduced the browser called netscap navigator , today firefox.

The netscap introduced a new technology called how to change html after rendering.

In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

                        "The birth of Javascript"

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.
............................................................................................
How dom works?

index.html           Broser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*******************************************************************************************	

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?



if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()

<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.

How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


What is our objective here? DOM Programming?


Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements:
......................

HTMLElement document.getElementById(id)	       Find an element by element id
HTMLElement Document document.getElementsByTagName(name)	Find elements by tag name
HTMLElement document.getElementsByClassName(name)	Find elements by class name
HTMLElement document.querySelectory(selector)        find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements:


document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element
.............................................................................................
				DOM Programming
.............................................................................................

How to implement dom programming?

1.using plain js
  if we use plain js , it is very difficult to build large applications

2.using frameworks and libs

2000 - The first javascript framework - DOJO
2002-2005 - JQuery - is the second most powerfull dom lib.
After 2006 - many js libs and frameworks introduced.....
..............................................................................................


Before 2007 - 

  HTML pages were created at server side, sent to the client , where jquery like javascript libs and frameworks were introduced to change the rendered html.
 After introduction of REST Full web services, Technology was changed.
 
 =>Server side programs only render data(json/xml) - REST APIS
 =>client side technology uses data json, where to create html pages.

                   "The birth of new Web App  - SPA - Single Web Application"

=SPA  is new Web Application introduced by "W3C"   as part of new HTML Spec.

SPA Tech Stack:
1.HTML 5
2.CSS 3
3.Javascript
4.AJAX

SPA is client side web application.
 =>creates html pages on the browser itself by getting data from the server via ajax.

2008 - Angular js framework was introduced
   The first MVC based SPA Framework
............................................................................................
				     Modern web

In the client side is SPA , server side REST 
In the server SPA can be prepared , sent to the client- Server side rendering
..............................................................................................
				     React

   "React is modern SPA lib created by face book based on "Flux Design Pattern" "



Architecture for libs and frameworks:
Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			 Browser Engine




Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine



What is jquery engine?
  Jquery engine is also javascript program.




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	              React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

..............................................................................................
				React Future
..............................................................................................

React was built by face book only for web browsers, later facebook decided to scale react for building other types of user application (mobile,iot applications).

React can be used to build application for 
........................................
1.browsers : Desktop -  react js
2.Mobile Apps : React Native

face book is working on many futures projects related to react
3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV  : React for TV.
6.React IOT : any devices
.............................................................................................
				React Applications

You can build any type of spa using react for any domain.
React is really suitable for data intensive applications(where data is more)

Popular React applications.

1.facebook most apps like adv,chart,messenger
2.espn cric info
3.flipkart
etc....
.............................................................................................
				React Echo System
.............................................................................................

1.Node.js
2.npm

What is node.js?

 Node.js is platform for building,testing,prototype any javascript applications.
 Node.js is java script runtime  for setting up projects.

Role of node.js in React?

=>Node.js provides compiler for react for compiling code
=>Node.js provides dev,testing servers for dev and testing
=>Node.js provides build tools for creating prodution builds
 
     "Node provides infra structure for building react apps"

NPM - Node package Manager.

 => It is tool used to setup project,downloading all project artifacts,compiling,running,building projects.


Yarn  - Node package manger
 
 It is advanced package manager similar to npm only.

..............................................................................................
				Setup React Project
..............................................................................................

Create React App - tool to setup project
https://create-react-app.dev/

Two ways of setting project 

via npm global modules
via npx modules

via npm:

Install tool:

open cmd:

install tool first
npm install create-react-app -g

create a app
create-react-app my-app

Create project directly without installing create-react-app tool

npx create-react-app my-app

..............................................................................................

E:\session\sapient\React-XT>create-react-app myapp

Creating a new React app in E:\session\sapient\React-XT\myapp.

Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts with cra-template...


added 1367 packages in 45s

169 packages are looking for funding
  run `npm fund` for details

Installing template dependencies using npm...
npm WARN deprecated source-map-resolve@0.6.0: See https://github.com/lydell/source-map-resolve#deprecated

added 38 packages in 5s

169 packages are looking for funding
  run `npm fund` for details
Removing template package using npm...


removed 1 package, and audited 1405 packages in 3s

169 packages are looking for funding
  run `npm fund` for details

6 moderate severity vulnerabilities

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

Success! Created myapp at E:\session\sapient\React-XT\myapp
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!

We suggest that you begin by typing:

  cd myapp
  npm start

Happy hacking!
..............................................................................................
			React Project layout- created by create-react-app
.............................................................................................

Folder Structure

myapp
 |
 node_modules
 package.json
 package-lock.json
 public 
 src
 readme.md


node_modules
  It is folder contains all libs files and folders downloaded from internet.
  React lib has been downloaded and kept inside this folder only.

package.json
   Every javascript project(it can be any js project), has package.json file  
   This file contains information about the project

Basic information:
 ->Name of the application "name" :"myapp"
 ->version of the application "version": "1.0.0"
 ->dedendencies
     libs  required for dev ,testing, production
    you can understand what version of lib is used in the current project
 ->scripts
     scripts contains information about how to start dev server,testing,production build.

package-lock.json:
  This file used by dev ops tools.


public 
  index.html
  This is entry file in react application.
  without this file we cant start the application

src
 |
 index.js
  App.js
 This folder contains application code files.

readme.md
   this is documentation file

..............................................................................................
			    How to start dev server(Development server)
.............................................................................................

npm start
..............................................................................................

How react creates dom tree(v.dom) and attaches on existing tree?

-You need to launch inital tree - which is not created by react.
 creating inital tree by loading static html file into browser 
 index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
.............................................................................................
			How to create dom node , attach on existing tree
				using plain js

				
Note : 
 index.js

//How to create simple element using plain javascript

function createElement() {
    let Heading = document.createElement('h1')
    console.log(Heading)
    Heading.innerHTML = "Hello React!"
    let rootElement = document.getElementById('root')
    rootElement.appendChild(Heading)
}
createElement()
.............................................................................................
			How to create dom node , attach on existing tree
				using react.js
		
React core modules:

react.js      => Core module
react-dom.js  => Browser


//How to create dom element using React
import React from 'react';
import ReactDOM from 'react-dom';

//declare React element(which represents element)
const Heading = <h1>Hello React!!</h1>

let rootElement = document.getElementById('root')
ReactDOM.render(Heading,rootElement)

The code above , we can see mixure of javascript and html.

How browser understands this code coimbination?

  The browser never understands this code directly.

What is this code is all about?
    
 Face book created a mini /small language for building react application - JSX language
.............................................................................................
			...........................................................................................
		 JSX - Java script and XML - langugage to create User interfaces
............................................................................................

React uses declarative and dsl  programming language

Declarative:
  =>you can tell what to do.
  =>more readable , like english

imperative:
  =>You have to tell what todo, how to do?
  languages- c,c++,java,javascript,
  libs : jquery
 
GPL:
  General purpose programming languages are used to build many category application
 c,c++,java...

DSL:
  Language created for only one specific purpose, cant be used for other domains

HTML -  can be used only for creating web document.
JSX  - can be used only by react for creating user interfaces.
  
       "Since jsx  is a language cant be executed on browser /mobile directly."


JSX compilation model:

                   layout.js / layout.jsx  -source code
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		  Excute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		    Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |
       v8
     Browser
..............................................................................................
				 Components
.............................................................................................

What is Component?
   Component  is nothing but "Object".

Component term introduced by MicroSoft in 1980s. According to Microsoft Component is object which is having "state(variables),behaviours(methods),User Interface(visual Representation)".

Component represents User Interface
Component is Object which represents User Interface.
User interface in browser is represented by HTML element or elements

Component can be represented some time , the object which helps to make up the Userinterface(invisible user interface).


element is <h1>Hello</h1>

elements are <div><div><h1>Hello</h1></div></div>

Plain Object:
 Object without ui is called plain object.
eg:
   function Employee() {
     this.id = 0;
     this.calculate=function(){}
   }

   new Employee()

DOM : Document Object Model
 
Document -  html
Object Model - Representation of HTML elements

Why We use Components model/Architecture?
  
=>Componets are independant objects.
=>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.
 
Eg : 
 I am creating a component called "tax calculator".
 
lets say i want to use the tax calculator inside my hr application and inside my sale applcation , and purchase application.
..............................................................................................
				One Component is not a component
.............................................................................................
In large application, we create more components.
All components we coimbine to make up other big components or application.
Such wiring(connecting) components forms the structure called "component tree".

Component Tree:
   =>Object tree / DOM Tree / Virutal DOM Tree.
..............................................................................................

How to create Components in react?

We have three patterns.

1.Variable Pattern
2.function pattern
3.ES 6 class Pattern


1.Variable Pattern

 Variable Pattern is used to create component using expressions.

let/const/var variableName = Object/Component

function Employee(){}

let     employee =          new            Employee();
?         ?                                  
keyword referenceVariable = operator       constructor call


2.function pattern
  
  We use functions to create components.
  The function can be es 5 function or es 6 arrow functions.

import React from 'react'
import ReactDOM from 'react-dom';

//create component using functions
// function Heading() {
//     return <h1>Hello React!</h1>  // here we return ReactElement(type of Object what we return)
// }

//Arrow functions : highly recommended
const Heading = () => <h1>Hello React!</h1> // here we return ReactElement(type of Object what we return)


//Imperative way of calling function : which is not recommened
// ReactDOM.render(Heading(),document.getElementById('root'));

//declarative way of calling function.
ReactDOM.render(<Heading></Heading>, document.getElementById('root'));

............................................................................................

Create Components Using ES 6 Class:
....................................

in order to create component  we need to inherit React.Component

React.Component is base class, which contains the follwing things

1.instance variables
 props
 state
2.instance methods

life cycle methods
 
to be discussed later
render() - Which returns ReactElement
 
other methods
to be discussed later

3.static variables
to be discussed later

import React from "react";
import ReactDOM from 'react-dom';

/**
 * React.Component is the base class in order to create Components
 */

class Heading extends React.Component {
    render() {
        return <h1>Hello React</h1>
    }
}

ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
..............................................................................................
	
Note: 
  Which pattern is good, or when to use?

 There is no pattern is bad or good.

 In case if react application is running old versions(before 16)

 =>class components 
     are used to mutate the state using setState method - statefull components
     Where ever you need life cycle methods
        
 =>function components are used to render ui and data - stateless components
 =>variable components are used just render static markup or tiny components used inside large   components.


 In case if react application is running new versions(After 16)

 functions and classes share the same behaviour
 functions can have state mutations, life cycle methods via a feature called "hooks".
 funcitional components are very powerfull with respect reuseability.
..............................................................................................	
				JSX Rules
..............................................................................................

JSX - Javascript and XML

What is JSX?
 JSX is dsl language to create user interfaces

What is relationship with XML?

 Inside JSX , we write javascript code and HTML code only not xml code.

Why the term XML is used?

 When we write JSX code, we need stable mark up standards.

You know very well HTML has weak parser  that means 
 <h1>hello
when run the code , the html parser does not stop rendering hello, it never throws any error

in order to avoid instability code inside jsx during compilation, JSX team adopted XML Parser rules, since XML parser has strong parser

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

3.Component names should start with Uppercase,generally would be noun.


eg:
import React from "react";
import ReactDOM from 'react-dom';

const Heading = ()=>{ 
    return <h1>Hello
}

ReactDOM.render(<Heading></Heading>, document.getElementById('root'));

src\index.js
  Line 8:35:  Parsing error: Unterminated JSX contents. (8:35)


Elements with no child : self closing.
import React from "react";
import ReactDOM from 'react-dom';

const Heading = ()=>{ 
    return <h1>Hello</h1>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<Heading/>, document.getElementById('root'));

..............................................................................................

import React from "react";
import ReactDOM from 'react-dom';

const Heading = ()=>{ 
    return <h1>Hello</h1>
            <h2>Sapient</h2>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<Heading/>, document.getElementById('root'));

 Parsing error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (6:12)

webpack 5.70.0 compiled with 2 errors in 41 ms

How to fix this problem?
  we need to wrap inside root/parent element.

What can be parent element?

  =>any html container  elements -  table,div,span,header,footer,address,nav
  =>you can use other components -  Tab,Dashboard....

.............
Right Code;
import React from "react";
import ReactDOM from 'react-dom';

const Heading = () => {
    return <div>
        <h1>Hello</h1>
        <h2>Sapient</h2>
    </div>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<Heading />, document.getElementById('root'));
..............................................................................................
Component names should start with Uppercase,generally would be noun.

import React from "react";
import ReactDOM from 'react-dom';

const heading = () => {
    return <div>
        <h1>Hello</h1>
        <h2>Sapient</h2>
    </div>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<heading />, document.getElementById('root'));

react-dom.development.js:67 Warning: The tag <heading> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at heading

Here it wont throw any error,but it wont render any thing in the screen.
you can see warnings in the console. you have to fix it.  
..............................................................................................
				 How jsx code gets compiled?

How code gets compiled?

source code: jsx code

function Welcome() {
      return <h1>Welcome To React!</h1>;
}
	|
     babel.js - compiler 
|	
|
compiled code
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
runtime : react engine
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
//React.createElement
function createElement(args){
   document.createElement(args); // low level api call
..............................................................................................
				Component Composition
..............................................................................................

How to create Component tree?

Layouts:

 Page
   Header
   Body 
   Footer

How to create components and compose them?
import React from "react";
import ReactDOM from 'react-dom';
//Header
const Header = () => <header>
    <h1>Sapient</h1>
</header>
//Footer
const Footer = () => <div>
    <h3>Footer</h3>
</div>
//Body
const Body = () => <div>
    <p>Publicis Sapient is an American digital consulting company, founded as Sapient in Cambridge, Massachusetts in 1990 by Jerry Greenberg and J. Stuart Moore</p>
    <p>
        On February 6, 2015, Sapient became a fully owned division of French advertising giant Publicis, in a deal valued at $3.7bn (£2.3bn)
    </p>
</div>

const Page = ()=> <div>
    <Header/>
    <Body/>
    <Footer/>
</div>

ReactDOM.render(<Page />, document.getElementById('root'));
..............................................................................................
				React Dev tools
..............................................................................................

React dev tool is used to visualize the component tree in the browser, without looking the source code ,how the tree has been constructured.

How to install react dev tool?

https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en

How to use react dev tool?

 1.lanuch application
 2.open dev tool inside chrome
.............................................................................................
				Component Compostion and Modularity
..............................................................................................

In react application, we dont / never dump the code into single file, we need modularize the application.

File Structure
Is there a recommended way to structure React projects?

  React doesn’t have opinions on how you put files into folders. 
  That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by features or routes
  One common way to structure projects is to locate CSS, JS, and tests together inside folders grouped by feature or route.
			
common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
 Another popular way to structure projects is to group similar files together, for example:

api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

Some people also prefer to go further, and separate components into different folders depending on their role in the application. For example, Atomic Design is a design methodology built on this principle. Remember that it’s often more productive to treat such methodologies as helpful examples rather than strict rules to follow.

               "https://bradfrost.com/blog/post/atomic-web-design/"


File Name conventions:

 FileName must match component feature  - profile 

File Name can be saved as fileName.js or fileName.jsx

Rules for jsx extensions:

-Root file (index,App) files must not be saved with ".jsx" , root files must be saved only with .js extension.

-Barrel export feature must be used in large application.

src/body/body.jsx
import React from 'react';

export const Body = () => <div>
    <p>Publicis Sapient is an American digital consulting company, founded as Sapient in Cambridge, Massachusetts in 1990 by Jerry Greenberg and J. Stuart Moore</p>
    <p>
        On February 6, 2015, Sapient became a fully owned division of French advertising giant Publicis, in a deal valued at $3.7bn (£2.3bn)
    </p>
</div>


src/footer/footer.jsx
import React from 'react';

export const Footer = () => <div>
    <h3>Footer</h3>
</div>


src/header/header.jsx
import React from 'react';

export const Header = () => <header>
    <h1>Sapient</h1>
</header>



src/layouts/page.jsx
import { Header } from '../header/header';
import { Footer } from '../footer/footer'
import { Body } from '../body/body'

export const Page = () => <div>
    <Header />
    <Body />
    <Footer />
</div>

src/index.js
import React from 'react';
import ReactDOM from 'react-dom'
import { Page } from './layout/page';

const App = () => <div>
    <Page />
</div>

ReactDOM.render(<App />, document.getElementById('root'))
 
.............................................................................................
				Barrel export
.............................................................................................

Use Case :

=>How to avoid multiple import of things from same folder
=>how to avoid file names while import

Barrel export solves the above problem

src/header
 -header.jsx
 -menubar.jsx
 -index.js

Steps:
1 inside every subfolders(header,body,profile)
 create index.js

2.import what ever you want to export outside 

3. you re export again what ever you have imported


src/header/index.js

import { Header } from './header'
import { MenuBar } from './menubar'

//barrel export : Re export
export { Header, MenuBar }


// import { Header } from '../header/header';
// import { MenuBar } from '../header/menubar';
import { Header, MenuBar } from '../header'; // here index.js refered automatically
// import { Footer } from '../footer/footer'
import { Footer } from '../footer'
import { Body } from '../body'
// import { Body } from '../body/body'
import React from 'react'

export const Page = () => <div>
    <Header />
    <MenuBar />
    <Body />
    <Footer />
</div>
..............................................................................................
				Tools for development
1.dev tool
2.lint tool

ES lint:
ESLint is a static code analysis tool for identifying problematic patterns found in JavaScript code. 
It was created by Nicholas C. Zakas in 2013.
Rules in ESLint are configurable, and customized rules can be defined and loaded.
ESLint covers both code quality and coding style issues

2.code generation tools in vs code.
  Go to vs code plugins , install any react code generation plugin - simple react 

3.Code formating
   Alt + shift

4.Build Tools
   tool for creating projects,
   compiling
   bundling projects
   webpack - it is one of the most powerfull build system for any javascript apps.
             create-react-app tool has been built with webpack behind scene
  


..............................................................................................
				How to Style components
..............................................................................................

CSS integration:
................

How to add css to an html element?

=> using class attribute  - external style
=> using style attribute - inline

HTML :
<div class="container">

</div>

<div style="background-color:red">

</div>

HTML ATTRIBUTES And JSX:

 We cant /should add html attributes directly in jsx code.
 JSX uses certain rules for adding html attributes.

 "Since JSX is closer to JavaScript than to HTML, React DOM uses "camelCase property naming convention" instead of HTML attribute names.

For example, class becomes className in JSX, and tabindex becomes tabIndex.

<div className="container" tabIndex>

</div>

List of jsx attributes:
accept acceptCharset accessKey action allowFullScreen alt async autoComplete
autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked
cite classID className colSpan cols content contentEditable contextMenu controls
controlsList coords crossOrigin data dateTime default defer dir disabled
download draggable encType form formAction formEncType formMethod formNoValidate
formTarget frameBorder headers height hidden high href hrefLang htmlFor
httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list
loop low manifest marginHeight marginWidth max maxLength media mediaGroup method
min minLength multiple muted name noValidate nonce open optimum pattern
placeholder poster preload profile radioGroup readOnly rel required reversed
role rowSpan rows sandbox scope scoped scrolling seamless selected shape size
sizes span spellCheck src srcDoc srcLang srcSet start step style summary
tabIndex target title type useMap value width wmode wrap

"https://reactjs.org/docs/dom-elements.html"

adding Events Handlers

 <button onClick={method}></button>
  
CSS : 

->You can add your own css - custom css
->you can add third party css frameworks -  bootstrap,materialdesign,spark...

import statement can be used to import js files.

import statement can also be used to import
=>css files
=>images
=>any static assets.


import React from 'react';
import ReactDOM from 'react-dom';
import { Page } from './layout/page';
import './index.css' //webpack automatically include this inside bundle
import './App.css'

const App = () => <div className="App">
    <Page />
</div>

ReactDOM.render(<App />, document.getElementById('root'))

Note: if you import css in root file(index.js), those css styles will be available across the applications.
..............................................................................................
				Component level css
.............................................................................................
if you want to apply/use css for a particular component.

src/header/header.css
.background {
    background-color: antiquewhite;
}

src/header/header.jsx
import React from 'react';
import './header.css'

export const Header = () => <header className="background">
    <h1>Sapient</h1>
</header>
.............................................................................................
			  How to add third party css - bootstrap
............................................................................................

Steps:

1.install bootstrap

npm install bootstrap --save

2.import bootstrap in index.js
import 'bootstrap/dist/css/bootstrap.css'

import React from 'react';
import ReactDOM from 'react-dom';
import { Page } from './layout/page';
// import './index.css' //webpack automatically include this inside bundle
// import './App.css'
import 'bootstrap/dist/css/bootstrap.css'

const App = () => <div className="container">
    <Page />
</div>

ReactDOM.render(<App />, document.getElementById('root'))
..............................................................................................
				Style Attribute
..............................................................................................


In html style is just a string

<div style="background-color:red">

In jsx(react) style is object

Style Object is nothing "css property representation in javascript"

CSS styles:

.className {
  background-color:pink;  //dash case notation
}

Css styles in javascript
 In js css styles are represented as camel case notation.

backgroundColor=pink

element.style.backgroundColor=pink

  "https://www.w3schools.com/jsref/dom_obj_style.asp"



Steps to create style object and attach with element

1.declare style object
//style object
const headerStyle = {
    backgroundColor: 'red'
};
2.attach with element
export const Header = () => <header className="background">
    <h1 style={headerStyle}>Sapient</h1>
</header>


import React from 'react';
import './header.css'

//style object
const headerStyle = {
    color: 'red'
};

export const Header = () => <header className="background">
    <h1 style={headerStyle}>Sapient</h1>
    <h2 style={{ color: 'blue' }}>Publisis</h2>
</header>
..............................................................................................
				Adding Comments in JSX
.............................................................................................

Js comments
//style object
const headerStyle = {s
    color: 'red'
};

JSX Comment:

export const Header = () => <header className="background">
    {/* Adding style attribute via variables */}
    <h1 style={headerStyle}>Sapient</h1>
    {/* this is inline style : adding style object in the same line */}
    <h2 style={{ color: 'blue' }}>Publisis</h2> 
</header>
............................................................................................
				JSX Gotchas

What is gotchas?
  a sudden unforeseen(dang problem).

JSX looks like HTML but there are some important differences you may run into.

HTML attributes
  <div className>

Html entities:

<div>First &middot; Second</div>

output
First · Second

JSX automatically skips the enties -modern jsx compilers.

The best practice, if you want to insert some html entities, special characters, inside jsx, dont insert directly, rather  before insert we need to saniztize that.

<div dangerouslySetInnerHTML={{__html: 'First &middot; Second'}} />

dangerouslySetInnerHTML:

 dangerouslySetInnerHTML is React’s replacement for using innerHTML in the browser DOM. In general, setting HTML from code is risky because it’s easy to inadvertently expose your users to a cross-site scripting (XSS) attack.

So, you can set HTML directly from React, but you have to type out dangerouslySetInnerHTML and pass an object with a __html key, to remind yourself that it’s dangerous. For example:

import React from 'react';
import ReactDOM from 'react-dom'


const Greeter=()=><div>

    {/* This is not safe code */}
   <div>First &middot; Second</div>
   <div>10 &lt; 2</div>
   {/* The below code is safe because , before rendering it has been sanzitized */}
   <div dangerouslySetInnerHTML={{__html: '10 &lt; 2'}}/>
   
   <div dangerouslySetInnerHTML={{__html: 'First &middot; Second'}} />

</div>

ReactDOM.render(<Greeter/>,document.getElementById('root'))

..............................................................................................
				  Dynamic Page - Data Binding
..............................................................................................

Types of web

1.static web
   -only html markup,hand coded.
2.dynamic web
   - html is created on fly with data

How to add data in the component /how to bind data in the component?

data can be represented in many ways.

-primitives - numbers,strings,boolean
-objects - literal objects, objects created out of class/function
-arrays - it is also object but collection 

How to bind data inside jsx?

let name='subramanian'

<h1>Hello {name} </h1>

{} -  databinding syntax.

data binding can be
{variable}
{expression} - {10*10} {getValue()} {emp.id}


import React from "react";
import ReactDOM from "react-dom";
import 'bootstrap/dist/css/bootstrap.css'
//profile component


function getPoints(){
   return 10;
}


const Profile = () => {
    const id = 1;
    const name = "Subramanian";
    const status = true;
    const address = {
        city: 'coimbatore',
        state: 'Tamil nadu'
    }
    return <div className="container">
        <h1>Profile Details</h1>
        <h3>Id  {id}</h3>
        <h3>Name {name} </h3>
        {/* React converts boolean values into empty string, if you want to display something , you have to use tenary operator to replace empty string */}
        <h3>status {status ? "Available" : "Not Available"}</h3>
        <h3>Points {getPoints() * 2 }</h3>
        <address>
            {address.city} {address.state}
        </address>
    </div>
}
ReactDOM.render(<Profile />, document.getElementById('root'))
..............................................................................................
			  Compoent Design Principles of React
.............................................................................................


Data can be declared for a component in two ways.

1.data is supplied from outside the component.
2.data is supplied within the component


1.Data is supplied from outside the component.

When component receives data from the outside, this pattern is called as "property pattern" / props pattern.

Outside the component means what? What is outside for the component?

YOu know very well , react creates components and assembles them in hierachical order(tree)
in the tree model, the one component called as "parent" component and other components are called child component and sibiling components.

outside means "Parent".

    "Data is supplied from the parent compoent to child component" - Props pattern /Property pattern
..............................................................................................

How to pass data using props pattern?

import React from "react";
import ReactDOM from "react-dom";
import 'bootstrap/dist/css/bootstrap.css'

function add(a, b) {
    return a + b;
}
console.log(add(10, 10))

//child component
// function Profile(id,name) {
// function Profile(profile){
//     return <div className="container">
//         <h1>Profile Details</h1>
//         <h3>id {profile.id}</h3>
//         <h4>Name {profile.name}</h4>     
//     </div>
// }
//props is just variable convention only not syntax.
// function Profile(props){
//     return <div className="container">
//         <h1>Profile Details</h1>
//         <h3>id {props.id}</h3>
//         <h4>Name {props.name}</h4>     
//     </div>
// }
const Profile = props => <div className="container">
    <h1>Profile Details</h1>
    <h3>id {props.id}</h3>
    <h4>Name {props.name}</h4>
    <h4>Status {props.status ? "Avilable" : "Not Available"}</h4>
    <address>
        {props.address.city} {props.address.state}
    </address>
</div>

//react says that dont pass any values as indivdual paramter.
//pack all parameters as single literal object and pass that object
const App = () => {
    // return Profile(1,"subramanian");
    //return Profile({id:1,name:"Subramanian",status:true})
    return <Profile id={1} name="Subramanian" 
    status={true} 
    address={{ city: 'Coimbatore', state: 'Tamil Nadu' }} />
}


ReactDOM.render(<App />, document.getElementById('root'))


Note: 
 property vs html attributes

<h1 style="background-color:red">
     |
    attribute
<Profile name="Ram" />
          |
      props/property

props and attribtues are syntax based same.

but they are different.

props are special attributes supplied to the components
attributes are supplied to the html elements.
..............................................................................................
			Single Directional /Uni directional data flow Model 
..............................................................................................

Uni directional data flow model is nothing but passing data from the parent compoent to child components only.
.............................................................................................
				 Components Design and Properties
.............................................................................................

Components in the tree going to get data from the parent component only, even if the components are in the nested.


Break the UI into components, pass data from parent to child

Use case: -  Requirement

    Profile
	id
        firstName
        lastName
        MiddleName
        gender
        address
        email
        phone
        status
        company
        expereince
        education
        skills
    ........
    DashBoard
         AccountSummary
		Name,AccountNo,Branch,AccountBalance
         Transaction
		Narration,date,type,closingbalance
         Fund Transfer
		Name,bank,Branch,ifccode, actions

.............................................................................................

Convert the Profile requirement into Components.

ProfileComponent
	id
	status
        skills
NameComponent
        firstName
        lastName
        MiddleName
GenderComponent
        gender
AddressComponent
        address
ContactComponent
        email
        phone
CompanyComponent
        company
ExperienceCompoent
        expereince
EducationCompoent
        education
           -school
           -degree
	   

src/index.js

import React from "react";
import ReactDOM from "react-dom";
import 'bootstrap/dist/css/bootstrap.css'
import { Profile } from "./profile";

const App = () => {
    return <Profile id={100} firstName="Subramanian" middleName="" lastName="Murugan" />
}


ReactDOM.render(<App />, document.getElementById('root'))


src/profile/profile.jsx

import React from 'react';
import { Name } from './'
import { Address } from '../address'


export const Profile = props => <div>
    <h1>Profile Details</h1>
    <h4>id {props.id}</h4>
    <Name firstName={props.firstName} middleName={props.middleName} lastName={props.lastName} />
    <Address />
</div>


src/profile/name.jsx

import React from 'react';
export const Name = props => <div>
    <h4>First Name {props.firstName}</h4>
    <h4>Middle Name {props.middleName}</h4>
    <h4>Last Name{props.lastName}</h4>
</div>

src/profile/index.js

import { Name } from "./name";
import { Profile } from "./profile";

export { Name, Profile }


Assingment:
  Write all the Profile components, pass data show all profile data.




































































 











    
  

































