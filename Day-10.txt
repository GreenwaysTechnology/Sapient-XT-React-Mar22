					Context
..............................................................................................


Types of State:

1.biz/application state
  eg : users,posts,products,cart,todos.......
2.UI State
   The state belongs to user interface
  isEnabled,show/hide,zoom,changeFont,ChangeColor,toggle

What type state i need to keep inside redux?

 only biz /application state only
 UI state must be kept inside componet itself using "useState"

Redux can help to share the application state across the components.

is there is any way in React itself to share global data?
  Yes!, The context object.

Context object should be not used to share biz data,rather we need to use only ui specific global data

=> Application themes
=> language settings
=> colors,fonts


Context provides a way to pass data through the component tree without having to pass props down manually at every level.

Without context How to pass props, props need to be passed manually at every level.

import React from 'react';
import ReactDOM from 'react-dom'

const theme = {
    backgroundColor: 'yellow'
}

const Toolbar = (props) => <ThemedButton theme={props.theme} />
const ThemedButton = (props) => <Button theme={props.theme} />;
const Button = props => <button style={props.theme}>Hello</button>

const App = props => <Toolbar theme={theme} />;

ReactDOM.render(<App />, document.getElementById('root'))

............................................................................................

const ctx = React.createContext 

ctx.Provider - which shares the data 
ctx.Consumer -  which consumes /read the shared data


import React from 'react';
import ReactDOM from 'react-dom'

const theme = {
    backgroundColor: 'green',
    color:'white'
}

//create context object
const { Provider, Consumer } = React.createContext();
// console.log(ThemeContext)

const Toolbar = (props) => <ThemedButton />

const ThemedButton = props => <Button />;

const Button = props => {
    return <Consumer>
        {theme => {
            return <button style={theme}>Hello</button>
        }}
    </Consumer>
}

const App = props => {
    return <Provider value={theme}>
        <Toolbar />
    </Provider>
}

ReactDOM.render(<App />, document.getElementById('root'))

..............................................................................................
				React Router
..............................................................................................

React Router is a module used to create SPAs.

If you want to menu driven application , we need routing.

React router is third party lib used for routing.

Steps:
npm install react-router-dom@6

How to enable router apps?

Router Component is top level Component in the react Application


const App =<div>
 <Provider store=store>
       <BrowserRouter>
		....
      </BrowserRouter>
 </Provider>

</div>


ReactDOM.render(<App/>,document.getElementById('root')

...............................................................................................

Steps:

1.

import React from 'react';
import ReactDOM from 'react-dom'
import { BrowserRouter } from 'react-router-dom';



const App = props => {
    return <BrowserRouter>
             
    </BrowserRouter>
}

ReactDOM.render(<App />, document.getElementById('root'))



import React from 'react';
import ReactDOM from 'react-dom'
import { BrowserRouter, Routes, Route, Outlet, Link } from 'react-router-dom';
import { Provider } from 'react-redux';
import store from './app/store'
import { Counter } from './features/counter/counter';


const Home = () => <h1>Sapient-home</h1>
const About = () => <h1>Sapient-about</h1>
const Dashboard = () => <h1>Sapient-dashboard</h1>
const Transactions = () => <h1>TransactionPage</h1>


const Layout = () => {
    return (
        <div>
            {/* A "layout route" is a good place to put markup you want to
            share across all the pages on your site, like navigation. */}
            <nav>
                <ul>
                    <li>
                        <Link to="/">Home</Link>
                    </li>
                    <li>
                        <Link to="/about">About</Link>
                    </li>
                    <li>
                        <Link to="/dashboard">Dashboard</Link>
                    </li>
                    <li>
                        <Link to="/transcations">Transactions</Link>
                    </li>
                    <li>
                        <Link to="/counter">Redux-Counter</Link>
                    </li>
                </ul>
            </nav>

            <hr />

            {/* An <Outlet> renders whatever child route is currently active,
            so you can think about this <Outlet> as a placeholder for
            the child routes we defined above. */}
            <Outlet />
        </div>
    );
}



const App = props => {
    return <Provider store={store}>
        <BrowserRouter>
            <Routes>
                {/* Parent Route -Master Menu */}
                <Route path="/" element={<Layout />}>
                    {/* Child routes */}
                    <Route index element={<Home />} />
                    <Route path="about" element={<About />} />
                    <Route path="dashboard" element={<Dashboard />} />
                    <Route path="transcations" element={<Transactions />} />
                    <Route path="counter" element={<Counter />} />
                </Route>
            </Routes>
        </BrowserRouter>
    </Provider>
}

ReactDOM.render(<App />, document.getElementById('root'))
..............................................................................................
				Node.js
..............................................................................................

What is Node.js?

  Node.js is platform and runtime for javascript lang.

Platform: collection of tools
Runtime: Execution engine where javascript can be executed..

V8- Javascript Engine from the google.

V8 was released as independant software - open source.

Why Node.js?

History of Node.js:

Ryan Dahl who created Node.js.When he was doing phd in math, who got bored in math , so who
started working on different project by looking the project "flicker" , he was thinking how flicker uploades photos into server.

He attended conference "nginx" conference where who insipred "Non Blocking" Web Server.

He started thinking how to build nginx like server to build web application -  non blocking webservers.

He was thinking how to put java language, but java language was not ready for non blocking computing.Why cant use "javascript", javascript inside browser is non blocking language.

The same time, google published "open source javascript runtime" called v8.

Ryan thought using v8 we can build arch for building non blocking web servers.===>Node.js
...........................................................................................

1.What is Exactly Non Blocking , Blocking?
2.IO
3.NonBlocking IO, Blocking IO
4.What is IO? How IO Works underneeth?

1.What is Exactly Non Blocking , Blocking?
=>Runtime=>Process
=>Threads

Runtime:
  It is program which runs other program.

Process:
  Every runtime is a process, every process is a program.

Program:
1.passive program
	The program which is not in ram
2.active program
    The program which is in ram - Process

The process would be written in c/c++ language.

On top of the process only the applications are running.


if you take java applications, which is running on JVM(process-program-c).

if you take js apps, which is running on javascript engine(process-program- c /c++)

Javascript Engines:

Every browser vendors who created javascript engine, based on ECMA spec implementation.

Chrome - V8
FireFox - SpiderMonkey
Edge -Chakra 
etc...

Process takes its own memory space, communicates with CPU.
..............................................................................................

Application : 
  It is collection of programs written in any pl.
 each pl offers apis(to talk to os)
    io apis,process api,memory apis.....
.............................................................................................
				  IO
  

File Descriptor:
................

-FD is a datastructure presented inside os kernal at very low level
-FD is mapper between os and hardware layer
-FD is entry and exit point of os with IO layer


FD is a table contains information which maps to IO resources

Integer value	Name	<unistd.h> symbolic constant[1]	<stdio.h> file stream[2]
0	Standard input	STDIN_FILENO	stdin
1	Standard output	STDOUT_FILENO	stdout
2	Standard error	STDERR_FILENO	stderr

FD is very simple array.

When fd is created? how many fd will be there in os?

fd is created when any process createad, more no fd will be there on os.
.............................................................................................
				Threading

Thread is nothing light weight process , which is running on phsyical process.
Every process has threads now a days, if more threads then called multi threading.

EVery app is running on process using a thread -  main thread.


Threading Model:

 -  Each Request is assigned to thread

C10k : concurrently handling ten thousand connections

A web server should handle 10k connections at the same point of time(may be 1sc/1min)

C10k is one of the real time problem, expectation was if web server able to handle
10k connections, then it is good infra structure,so i dont need to add more machines.

How to reduce servers , how to utilize the existing hardware resouces.

               "The birth of non blocking technology".

1000 request = 1000 thread.

Threads are not cheaper meaning that.

if a thread is created, if it is used then it said be "active", if the thread is not used
then thread is "sleeping".
.............................................................................................					Non blocking io apis - Linux

select + read => the first api
poll = Event driven api
epoll = Event driven framework

Node.js:

-Multi platform, non blocking ,event processing archiecture.
-Reduces more threads,having limited threads-single thread for event processing - Event loop thread
-Suitable for large network concurrency applications.

 1000 requests = 1 thread.

Node components:

V8 :
  It is google javascript engine , integrated on Node.


libuv:
  libuv is a multi-platform support library with a focus on asynchronous I/O.
  libuv is collection of c apis for multiple operatings
    -libuv works with epoll in linux
    -libuv works with kqueue in mac/open bsd os
    -libuv works with iocp in windows

Features:

Full-featured event loop backed by epoll, kqueue, IOCP, event ports.
Asynchronous TCP and UDP sockets
Asynchronous DNS resolution
Asynchronous file and file system operations
File system events
ANSI escape code controlled TTY
IPC with socket sharing, using Unix domain sockets or named pipes (Windows)
Child processes
Thread pool
Signal handling
High resolution clock
Threading and synchronization primitives


libuv contains:

1. event loop thread:

  This is demaon thread, starts spinning for listening for incomming events from os kernal space.

2.Thread Pools
   libuv maintains set of threads other than event loop thread for doing "BLOCKING" IO operations.

Warining; 
   dont over use thread pools , because if use more threads from the thread poll then it impacts performance,memory...
   Dont block event loop thread.



Non Blocking and Async implementation:


Non Blocking and Async implementation:


Three styles of writing async programming

Note: All are same but just wrappers on top that.

1.callback style /  listner style

2.Promise style : wrapper for callbacks

3.async functions and await : wrapper for promise.


How javascript /node understands that programs need proceed by event loops thread.
what are blocking api and what are non blocking api.

->All apis are generally blocking except apis which binds with non blocking apis.

eg:
 console.log() - blocking

Node provides non blocking category of apis

1.timers

2.General fs io apis

3.all network api
   http,tcp,udp


All non blockings are powered "handler/callback/listener" functions.

Listener functions are generally higher order function: Passed as parameter.
..............................................................................................
				  How to use node.js

Node is platform and run time , can be executed on host operating system via shell.

How to start node? / How to run javascript programs on node platform?

1.REPL mode
   without writing any code we can test js features
node
Welcome to Node.js v14.17.0.
Type ".help" for more information.
>
2.scripted mode
 running javascript code

src/index.js
console.log('hello')

>node src/index.js
hello node js!

Node.js is used for building server side applications-network apps,io apps
node.js can be used for browser apps - DOM Api

Browser objects
window
document
history
location
alert
etc....

Node js supports all javascript objects and apis execept browser specific.

In browser, window is super object, In node "process" is super object


const hello = () => "Hello"

class Customer {
    findAll() {
        return "customers"
    }
}
let customer = new Customer();
console.log(hello())
console.log(customer.findAll())

.............................................................................................
			 How to write non blocking/Async - using Callbacks
..............................................................................................

Timer:
//callbacks
function blockMe(message) {
    console.log(message)
}
//non blocking :Higher order function  : function as parameter
function delay(callback) {
    //wrap this inside async api 
    setTimeout(() => callback('Hello,I am delayed response'), 5000)
}

blockMe('start')
delay((data)=> {
    console.log(data)
})
blockMe('end')
.............................................................................................                              Nested Callbacks, Callback Hell
..............................................................................................

 The output of one callback, will be input to another callback.

Use case

 - call getUser api, which returns user if not , throw error.

 - Based on user i need to call login method, if login failed throw error

 - Based on login output, i need to call dashboard



//sequential calls in blocking mode 

function getUser(){
    return {
        id:1,
        name:'admin'
    }
}
function login(user){
   if(user.name === 'admin'){
       return true
   }
   return false
}
function main(){
  //flow 
  let user = getUser()
  let status = login(user)
  console.log(status ? "Login success" : "Login failed")
}
main();

...

Async work flow: callback nesting

//sequential calls in blocking mode 

function getUser(success, failure) {
    let user = {
        id: 1,
        name: 'admin'
    }
    //user = null
    let error = {
        code: 500,
        message: 'User not found'
    }
    if (user) {
        setTimeout(() => success(user), 1000)
    } else {
        setTimeout(() => failure(error), 1000)
    }

}
function login(user, success, failure) {
    let status = 'login success'
    let error = 'login failed'
    if (user.name === 'admin') {
        setTimeout(() => success(status), 1000)
    } else {
        setTimeout(() => failure(error), 1000)
    }
}
function showDashBoard(status, success, failure) {
    let homePage = 'Home Page'
    let ErrorPage = 'Error Page'
    if (status === 'login success') {
        setTimeout(() => success(homePage), 1000)
    } else {
        setTimeout(() => failure(ErrorPage), 1000)
    }
}

function main() {
//callback nesting
    getUser(user => {
        console.log(user)
        login(user, status => {
            console.log(status)
            showDashBoard(status, page => {
                console.log(page)
            }, error => {
                console.log(error)
            })
        }, error => {
            console.log(error)
        })
    }, error => {
        console.log(error)
    })

}
main();

Questions:

1.Whether this code is able to understand quickly
2.Whether this code is able to debug
3.Whehter this code is scalable?
4.whether this code is maintaiable?

Yes
 "Callback Hell"

fs.readdir(source, function (err, files) {
  if (err) {
    console.log('Error finding files: ' + err)
  } else {
    files.forEach(function (filename, fileIndex) {
      console.log(filename)
      gm(source + filename).size(function (err, values) {
        if (err) {
          console.log('Error identifying file size: ' + err)
        } else {
          console.log(filename + ' : ' + values)
          aspect = (values.width / values.height)
          widths.forEach(function (width, widthIndex) {
            height = Math.round(width / aspect)
            console.log('resizing ' + filename + 'to ' + height + 'x' + height)
            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {
              if (err) console.log('Error writing file: ' + err)
            })
          }.bind(this))
        }
      })
    })
  }
})

Callback Hell:

 -It is not bug or error in code
 -It is way of writing callback based program
 -Callback based non blocking programming hard to understand,maintain,debug,scale Which 
  called as "Callback Hell".
..............................................................................................

How to write better async/non blocking code without callbacks?

-Generally without callbacks not possible to write async/non blocking code.
-Rather we can abstract complexity of writting callbacks.

In 2005, JQUERY team started with working complex callback patterns, they found callback hell problem.

They proposed a  Design pattern to write better callback programming(Async) programming.

  "Promise".

Promise is design pattern which hides complexity of callback patterns


Since Promise is design pattern, many people have implemented Promise design pattern.

1.JQuery -first promise implementation
2.many libs and frameworks

...........................................................................................

In order standarize , ECMA committe decided to include Promise Design pattern at language level .(ES 6)
2012 E6 Committe introduced promise design pattern  as  "Promise" Object  in javascript.
............................................................................................

		Promises and non blocking,async and callback hell issues:
..............................................................................................

features of Promise Object:

1.Promise by deafult is Async. Which implements timer api with 0 ms .

Promise can be used with any async callback based  implementations.

Objective:

 To remove callbacks in async/non blocking code. write cleaner async programming.
 To remove complex callback chaining code.

Promise Implemenation:

1. Create Promise Object from Promise contructor
2. Create Promise object from factory apis 

Promise object methods:
1.then - success
2.catch - errors
3.finally - clean up
factory api to create Promise object
4.resolve
5.reject
.......................................
6.all
7.race

Steps:

1.Create Promise Object -  using either Factory or constructor

Factory Pattern vs Constructor

-1.Factor Pattern is used for simple async operations where timer is required

-2.Constructor pattern is used for wrappy any existing asyn/non blocking callback based operations eg: timer,fs,networking......

2.Get response - by registering listener methods
   -then - success 
   -catch -failures


callback style vs Promise style:

1.in callback we need to pass function as parameter
2.in promise style, we register function as listner for success and failure

Factory Pattern:

function blockMe(message) {
    console.log(message)
}

//only success - resolve
//only failure - reject
//success or failure - resolve or reject

//only success - resolve
function getSuccess(){
    return Promise.resolve('Hello') // we Promise Object by encaspulating the success data
}


blockMe('start')
getSuccess().then(data=>console.log(data))
blockMe('end')
............................................................................................
function blockMe(message) {
    console.log(message)
}

//only success - resolve
//only failure - reject
//success or failure - resolve or reject

//only success - resolve
function getFailure(){
    return Promise.reject('something went wrong') // we Promise Object by encaspulating the success data
}


blockMe('start')
getFailure().catch(err=>console.log(err))
blockMe('end')
.............................................................................................

function blockMe(message) {
    console.log(message)
}


function login(userName, password) {
    if (userName === 'admin' && password === 'admin') {
        return Promise.resolve('login success')
    }
    return Promise.reject('Login is failed')
}


blockMe('start')
login('admin', 'admin')
    .then(status => console.log(status))
    .catch(err => console.log(err))
blockMe('end')
.............................................................................................
				 Promise Constructors
..............................................................................................

Lets say i want to return Promise after 1000ms

Convert any callback based code into Promise Based

function blockMe(message) {
    console.log(message)
}

//use timer
function login(userName, password) {
    //constructor 
    return new Promise((resolve, reject) => {
        if (userName === 'admin' && password === 'admin') {
            setTimeout(() => resolve('login success'), 1000)
        } else {
            setTimeout(() => reject('login failed'), 1000)

        }
    })

}


blockMe('start')
login('admin', 'admin')
    .then(status => console.log(status))
    .catch(err => console.log(err))
blockMe('end')
............................................................................................
				Nest callback solution-Nested Promises

function getUser() {
    console.log('get user is called')
    let user = {
        id: 1,
        name: 'admin'
    }
    //user = null
    let error = {
        code: 500,
        message: 'User not found'
    }
    return new Promise((resolve, reject) => {
        if (user) {
            setTimeout(() => resolve(user), 1000)
        } else {
            setTimeout(() => reject(error), 1000)
        }
    })


}
function login(user) {
    console.log('login  is called')

    return new Promise((resolve, reject) => {
        let status = 'login success'
        let error = 'login failed'
        if (user.name === 'admin') {
            setTimeout(() => resolve(status), 1000)
        } else {
            setTimeout(() => reject(error), 1000)
        }
    })
}
function showDashBoard(status) {
    console.log('show dashboard is called')
    return new Promise((resolve, reject) => {
        let homePage = 'Home Page'
        let ErrorPage = 'Error Page'
        if (status === 'login success') {
            setTimeout(() => resolve(homePage), 1000)
        } else {
            setTimeout(() => reject(ErrorPage), 1000)
        }
    })
}

function main() {
    //callback nesting
    // getUser(user => {
    //     console.log(user)
    //     login(user, status => {
    //         console.log(status)
    //         showDashBoard(status, page => {
    //             console.log(page)
    //         }, error => {
    //             console.log(error)
    //         })
    //     }, error => {
    //         console.log(error)
    //     })
    // }, error => {
    //     console.log(error)

    // })

    //promise -v1
    // getUser()
    //     .then(user => {
    //         console.log(user)
    //         login(user)
    //             .then(status => {
    //                 console.log(status)
    //                 showDashBoard(status)
    //                     .then(page => {
    //                         console.log(page)
    //                     })
    //                     .catch(error => console.log(error))
    //             }).catch(error => console.log(error))
    //     })
    //     .catch(error => {
    //         console.log(error)
    //     })

    //remove multi nested then and catch
    // getUser()
    //     .then(user => {
    //         return login(user)
    //     })
    //     .then(status => {
    //         return showDashBoard(status)
    //     })
    //     .then(page => {
    //         console.log(page)
    //     })
    //     .catch(error => console.log(error))
    getUser()
        .then(user => login(user))
        .then(status => showDashBoard(status))
        .then(page => console.log(page))
        .catch(error => console.log(error))

}
main();
..............................................................................................
Promise Hell:

 In large code base, you can see many "thenables", how to reduce thenables.

ES 7 introduced even simple keywords , looks like sync programm/sequencial call.
"Sync style of async programm"

"async function and await keyword.

How to refactor the above code.

async...await keywords

Promise Hell: Promise has limitions;
......................

1.Promise is still  complex when you start scalling complex async operations.

2.Which is not readable ,which uses lot of then, catch blocks

In order to write even simple complex async work flows ES 7 introduced
a concept called "async await" keywords


 It is simplest pattern of Promises.
 It is promise driven only.

         "Sync style of Async Code" 

async key must be used with function declaration.
await is used to pause async calls


async ;

-used in front of function declaration ; those functions are called async function.

async is keyword must be used infront of function- async functions
function getUser() {
    console.log('get user is called')
    let user = {
        id: 1,
        name: 'admin'
    }
    //user = null
    let error = {
        code: 500,
        message: 'User not found'
    }
    return new Promise((resolve, reject) => {
        if (user) {
            setTimeout(() => resolve(user), 1000)
        } else {
            setTimeout(() => reject(error), 1000)
        }
    })


}
function login(user) {
    console.log('login  is called')

    return new Promise((resolve, reject) => {
        let status = 'login success'
        let error = 'login failed'
        if (user.name === 'admin') {
            setTimeout(() => resolve(status), 1000)
        } else {
            setTimeout(() => reject(error), 1000)
        }
    })
}
function showDashBoard(status) {
    console.log('show dashboard is called')
    return new Promise((resolve, reject) => {
        let homePage = 'Home Page'
        let ErrorPage = 'Error Page'
        if (status === 'login success') {
            setTimeout(() => resolve(homePage), 1000)
        } else {
            setTimeout(() => reject(ErrorPage), 1000)
        }
    })
}

async function main() {
    try {
        let user = await getUser() //await will write then block for us
        let status = await login(user)
        let page = await showDashBoard(status)
        console.log(user, status, page)
    } catch (error) {
        console.log(error)
    }
}
main();
.............................................................................................
				How build enterprise javascript apps



Modularity:
..........

In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.

d:/javaapps/src/
    com/ibm/cms/Customer.java


What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
 


Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd
4.ES 6 Module design pattern  = amd + cjs
------------------------------------------------------------
5.System = AMD = CJS + ES 6
6.UMD = NAMESPACE + AMD + CJS = ES 6



only two design patterns are used in development

1.CJS - Common JS =  namespace + amd
2.ES 6 Module design pattern  = amd + cjs

CJS ; implemented inside node js. node supports commonjs by default.

I can organize the code , based on these patterns, but what about runtimes?
  js runtime never suppport these patterns directly then each design pattern is lib.

 Loaders : it is simple js lib to help link and load js files.

////////////////////////////////////////////////////////////////////////////////////////////




lets start cjs first;
......................

cjs is built in node js.
node supports cjs in built. no separate loader or linker is required
but if you run cjs code on browsers , we need loaders.


How to implement cjs in node? How to share code across the files and how to link files


keywords

-require('./folder/fileName')
  to link files
-exports
   -used to share code in form of object
   -code is packed inside object and shared that object
-module.exports
   -used to share code as it is.


src/lib/mylib.js
//commonjs code sharing 

//exports will packe the code into an object , share it outside
exports.name = 'subramanian'
exports.sayHello = function () {
    return 'Hello'
}
exports.skills = ["react", "node", "microservices"]

src/services/todoservice.js


class TodoService {

    findAll() {
        return 'todos'
    }
}
module.exports = TodoService

// const info = require('./lib/mylib')
const { name, sayHello, skills } = require('./lib/mylib')
const TodoService = require('./services/todoservice')

function main() {
    //console.log(info.name, info.sayHello(), info.skills)
    console.log(name, sayHello(), skills)
    let todoService = new TodoService();
    console.log(todoService.findAll())
}
main()
..............................................................................................

HTTP programming
 -core http
 -express
 -microservices
File system programming
























 